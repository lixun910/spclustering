<!DOCTYPE html>
<meta charset="utf-8">
<style>

.link {
  stroke: #000;
  stroke-width: 1.5px;
}

.node {
  cursor: move;
  fill: #ccc;
  stroke: #000;
  stroke-width: 1.5px;
}

.node.fixed {
  fill: #f00;
}

</style>
<body>
  <script src="http://rawgithub.com/jbeuckm/K-Means/master/build/kmeans.min.js"></script>
  <script src="https://d3js.org/d3.v3.min.js"></script>
<script>

var points = [];
var means = [];
var assignments = [];
var color = d3.scale.category10();

function changeK(amt) {
  if (amt > 0) {
    while (amt--) {
      var i = Math.floor(Math.random() * points.length);

      var p = points[i];
      var newPoint = p.slice(0);
console.log("adding new point "+newPoint);
      means.push(newPoint);
    }
  }
  else while (amt < 0) {
    means.pop();
    amt++;
  }
  assignments = kmeans.assignPointsToMeans(points, means);
}

var width = 960,
    height = 700;

var force = d3.layout.force()
    .size([width, height])
    .gravity(0)
    .charge(0)
    .friction(0)
    //.charge(100)
    .linkStrength(function(lnk, idx){
      return lnk.sim / 5.0;
    })
    .on("tick", tick);

var drag = force.drag()
    .on("dragstart", dragstart);

var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height);
var margin = 160;

var link = svg.selectAll(".link"),
    node = svg.selectAll(".node");

d3.json("graph.json", function(error, graph) {
  if (error) throw error;

  var x_min = d3.min(graph.nodes, function(d){ return d.x;});
  var x_max = d3.max(graph.nodes, function(d){ return d.x;});
  var y_min = d3.min(graph.nodes, function(d){ return d.y;});
  var y_max = d3.max(graph.nodes, function(d){ return d.y;});

  var x_scale = d3.scale.linear().domain([x_min, x_max]).range([margin, width - margin]);
  var y_scale = d3.scale.linear().domain([y_max, y_min]).range([margin, height - margin]);

  graph.nodes.forEach(function(d){
    d.x = x_scale(d.x);
    d.y = y_scale(d.y);
    //d['fixed'] = true;
    points.push([d.x, d.y]);
  });

  changeK(5);

  graph.nodes.forEach(function(d, i){
    console.log(i);
    d['cat'] = assignments[i];
  });

  force
      .nodes(graph.nodes)
      .links(graph.links)
      .start();

  link = link.data(graph.links)
    .enter().append("line")
      .attr("class", "link");

  node = node.data(graph.nodes)
    .enter().append("circle")
      //.attr("class", "node")
      .attr('fill', function(d, i) {
        return color(d.cat);
      })
      .attr("r", 6)
      .attr("id", i)
      .on("dblclick", dblclick)
      .call(drag);
});

function tick() {
  link.attr("x1", function(d) { return d.source.x; })
      .attr("y1", function(d) { return d.source.y; })
      .attr("x2", function(d) { return d.target.x; })
      .attr("y2", function(d) { return d.target.y; });

  node.attr("cx", function(d) { points[d.index][0] = d.x;return d.x; })
      .attr("cy", function(d) { points[d.index][1] = d.x;return d.y; });

  //d3.selectAll("circle").attr('fill', 'gray');

  //means = [];
  //changeK(5);
  assignments = kmeans.assignPointsToMeans(points, means);

  d3.selectAll("circle").attr('fill', function(d,i) {
      console.log(d);
      d.cat = assignments[i];
      return color(d.cat);
  });

}

function dblclick(d) {
  d3.select(this).classed("fixed", d.fixed = false);
}

function dragstart(d) {
  d3.select(this).classed("fixed", d.fixed = true);
}

</script>
